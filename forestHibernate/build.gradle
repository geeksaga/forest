apply plugin: 'spring-boot'

jar {
    baseName = 'forest-jpa-hibernate'
    version =  '0.1.0'
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-data-jpa:$rootProject.ext.springBootVersion")
    // compile("org.springframework.boot:spring-boot-starter-security:$rootProject.ext.springBootVersion")
    

    // compile "org.hibernate:hibernate-entitymanager:4.3.7.Final"
    compile "org.hibernate:hibernate-validator:5.1.3.Final"
    compile "org.hibernate:hibernate-validator-annotation-processor:5.1.3.Final"

    compile("com.mysema.querydsl:querydsl-core:$rootProject.ext.querydslVersion")
    compile("com.mysema.querydsl:querydsl-jpa:$rootProject.ext.querydslVersion")
    compile("com.mysema.querydsl:querydsl-sql:$rootProject.ext.querydslVersion")
    
    compile("com.mysema.querydsl:querydsl-apt:$rootProject.ext.querydslVersion") {
        exclude group: 'com.google.guava'
    }
    
    
    compile("c3p0:c3p0:0.9.1.2")
    compile("com.jolbox:bonecp:0.8.0.RELEASE")
    
    compile("org.hsqldb:hsqldb:2.3.2")
    // compile("com.h2database:h2:1.3.160")
    
    // compile("org.glassfish.web:javax.el:2.2.6")
    compile("joda-time:joda-time:2.6")
    
    // compile("javax.servlet:javax.servlet-api:3.1.0")
    
    /*
    provided("com.mysema.querydsl:querydsl-apt:$rootProject.ext.querydslVersion") {
        exclude group: 'com.google.guava'
    }
    */
    // compile "org.springframework:spring-webmvc:$rootProject.ext.springVersion"
    // compile "org.springframework:spring-aop:$rootProject.ext.springVersion"
    
    provided("org.springframework.security:spring-security-core:3.2.5.RELEASE")
    
    testCompile("org.springframework.boot:spring-boot-starter-test:$rootProject.ext.springBootVersion")
    
    testRuntime("javax.el:javax.el-api:3.0.0")
    testRuntime("org.springframework.boot:spring-boot-starter-test:$rootProject.ext.springBootVersion")
    
    
    /*
	querydslapt(
		[group: 'com.mysema.querydsl', name: 'querydsl-apt', version: "${versions.querydsl}"]
	)
	*/
}

/*
test {
    jvmArgs = ['-ea', '-Xmx256m']
    logging.captureStandardOutput(LogLevel.INFO)
    testReport = false
}
*/

sourceSets {
    generated {
        java {
            srcDirs = ['src/main/generated']
        }
    }
}

configurations {
	querydslapt
}

task generateQueryDSL(type: JavaCompile, group: 'build', description: 'Generates the QueryDSL query types') {
    source = sourceSets.main.java
    classpath = configurations.compile + configurations.provided
    options.compilerArgs = [
            "-proc:only",
            "-processor", "com.mysema.query.apt.jpa.JPAAnnotationProcessor"
    ]
    destinationDir = sourceSets.generated.java.srcDirs.iterator().next()
}

compileJava {
    dependsOn generateQueryDSL
    source sourceSets.generated.java.srcDirs.iterator().next()
}

compileGeneratedJava {
    dependsOn generateQueryDSL
    options.warnings = false
    classpath += sourceSets.main.runtimeClasspath
}

clean {
    delete sourceSets.generated.java.srcDirs
}

idea {
    module {
        sourceDirs += file('src/main/generated')
    }
}

eclipse {
    classpath {
        // defaultOutputDir = file("${buildDir}/classes/main")
        // containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    
        file {
            withXml {
                
                Map<String, String> map = new HashMap<String, String>()
                map.put('exported', 'true')
                map.put('path', 'org.springsource.ide.eclipse.gradle.classpathcontainer')
                map.put('kind', 'con')
                
                def node = it.asNode()
                node.appendNode('classpathentry', [kind: 'src', path: 'src/main/generated'])
                node.appendNode('classpathentry', map)
            }
        }
    }

    project  {
        name = 'forestHibernate'
        comment = 'forest project'
        natures = [
            'org.springframework.ide.eclipse.core.springnature',
            'org.springsource.ide.eclipse.gradle.core.nature',
            'org.eclipse.jdt.core.javanature',
        ]
    }
    
    jdt {
	    sourceCompatibility = javaVersion
	    targetCompatibility = javaVersion
    }
}

/*
eclipse.classpath.file {
    // beforeMerged { classpath ->
    whenMerged { classpath ->
        classpath.entries.remove { entry -> entry.kind == 'con' }
        
        classpath.entries.findAll { entry -> entry.kind == 'con' }*.path = 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
        
        // classpath.entries.findAll { entry -> entry.kind == 'lib' }*.exported = false
        classpath.entries.removeAll { entry -> entry.kind == 'lib' }
    }
}
*/

task wrapper(type: Wrapper) {
    gradleVersion = '2.2'
}


tasks.eclipse.dependsOn cleanEclipse
tasks.eclipse.dependsOn generateQueryDSL
// tasks.eclipse.dependsOn initProject
tasks.idea.dependsOn generateQueryDSL