apply plugin: 'base'

buildscript {
    ext {
        springBootVersion = '1.2.0.RELEASE'
	    javaVersion = 1.7
	
	    springVersion = "4.1.3.RELEASE"
	    springjpaVersion = "1.7.1.RELEASE"
	    querydslVersion = "3.6.0"
	    hibernateVersion = "4.3.4.Final"
	    springsecurityVersion = "3.2.5.RELEASE"
    }
    
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'http://repo.spring.io/plugins-release/' }
    }
    
    dependencies {
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
        
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

repositories {
    mavenCentral()
}

configurations {
    providedRuntime
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-idea'
    apply plugin: 'propdeps-eclipse'

    repositories {
       mavenLocal()
       mavenCentral()
       maven { url "https://repo.spring.io/libs-release" }
       maven { url "https://repository.jboss.org/nexus/content/repositories/releases" }
       maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
       maven { url "http://repository.springsource.com/maven/bundles/release" }
       maven { url "http://repository.springsource.com/maven/bundles/external" }
    }

    dependencies {
        testCompile 'junit:junit:4.12'
        
        def springVersion = "4.1.3.RELEASE"

        compile 'org.slf4j:slf4j-api:1.7.7'

        compile 'com.jolbox:bonecp:0.8.0.RELEASE'

        testCompile "junit:junit:4.12"
    }

	sourceCompatibility = 1.7
	targetCompatibility = 1.7

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    version = '1.0'

    if(project.hasProperty('target')) {
        sourceSets {
            main.resources.srcDirs = ['src/main/resources', "src/main/resources-${project.target}"]
            test.resources.srcDirs = ['src/test/resources', "src/test/resources-${project.target}"]
        }
    } else {
        String hostname = InetAddress.getLocalHost().getHostName().toLowerCase();
        if(hostname.endsWith('.local')) {
            hostname = hostname.replace(".local", '')
        }
        sourceSets {
            main.resources.srcDirs = ['src/main/resources', "src/main/resources-" + hostname]
            test.resources.srcDirs = ['src/test/resources', "src/test/resources-" + hostname]
        }
    }
    
	eclipse {
	    classpath {
	         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
	         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7'
	    }
	}
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.2'
}

// 프로젝트 초기화
// 1. java source directory 생성 : src/main/java, src/test/java
// 2. resource directory 생성    : src/main/resource, src/test/resource
// 3. web source directory 생성  : src/main/webapp, src/main/webapp/WEB-INF
/*
task initProject(description: 'initialize project') << {
    createDir = {
        println "create source directory: $it"
        it.mkdirs()
    }
    sourceSets*.java.srcDirs*.each createDir
    sourceSets*.resources.srcDirs*.each createDir
    createDir webAppDir
    createDir new File(webAppDir, '/WEB-INF')
}
*/