apply plugin: 'base'

buildscript {
    ext {
        springBootVersion = '1.2.1.RELEASE'
	    javaVersion = 1.8
	    slf4jVersion = '1.7.10'
	    log4jVersion = '2.1'
	    jodaTimeVersion = '2.6'
	    springVersion = '4.1.4.RELEASE'
	    springjpaVersion = '1.7.1.RELEASE'
	    querydslVersion = '3.6.0'
	    hibernateVersion = '4.3.4.Final'
	    springsecurityVersion = '3.2.5.RELEASE'
	    luceneVersion = '4.10.3'
    }
    
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'http://repo.spring.io/plugins-release/' }
    }
    
    dependencies {
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
        
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
    }
}

allprojects {
	group = 'com.geeksaga.forest'
}

repositories {
    mavenCentral()
}

configurations {
    providedRuntime
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-idea'
    apply plugin: 'propdeps-eclipse'
    
    repositories
    {
       mavenLocal()
       mavenCentral()
       maven { url "https://repo.spring.io/libs-release" }
       maven { url "https://repository.jboss.org/nexus/content/repositories/releases" }
       maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
       maven { url "http://repository.springsource.com/maven/bundles/release" }
       maven { url "http://repository.springsource.com/maven/bundles/external" }
    }

    dependencies
    {
        //compile("org.springframework.boot:spring-boot-starter-log4j:$springBootVersion")
        compile "org.slf4j:slf4j-api:$slf4jVersion"
        compile "org.apache.logging.log4j:log4j-core:$log4jVersion"
        compile "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"
        compile "joda-time:joda-time:$jodaTimeVersion"

        testCompile "junit:junit:4.12"
    }

	sourceCompatibility = 1.8
	targetCompatibility = 1.8

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    version = '1.0'

    if(project.hasProperty('target'))
    {
        sourceSets
        {
            main.resources.srcDirs = ['src/main/resources', "src/main/resources-${project.target}"]
            test.resources.srcDirs = ['src/test/resources', "src/test/resources-${project.target}"]
        }
    }
    else
    {
        String hostname = InetAddress.getLocalHost().getHostName().toLowerCase();
        if(hostname.endsWith('.local'))
        {
            hostname = hostname.replace(".local", '')
        }
        sourceSets
        {
            main.resources.srcDirs = ['src/main/resources', "src/main/resources-" + hostname]
            test.resources.srcDirs = ['src/test/resources', "src/test/resources-" + hostname]
        }
    }
    
	eclipse
	{
	    classpath
	    {
	         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
	         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
	    }
	}
}

/*
project('forestWebApp') {
	description = 'Forest Web Application'

	dependencies {
	    compile "org.apache.lucene:lucene-core:$luceneVersion"
	    compile "org.apache.lucene:lucene-analyzers-common:$luceneVersion"
	    compile "org.apache.lucene:lucene-queryparser:$luceneVersion"
	}
}
*/

task wrapper(type: Wrapper) {
    gradleVersion = '2.2'
}

/*
task initProject(description: 'initialize project') << {
    createDir = {
        println "create source directory: $it"
        it.mkdirs()
    }
    sourceSets*.java.srcDirs*.each createDir
    sourceSets*.resources.srcDirs*.each createDir
    createDir webAppDir
    createDir new File(webAppDir, '/WEB-INF')
}
*/