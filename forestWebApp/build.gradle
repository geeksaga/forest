apply plugin: 'eclipse-wtp'
apply plugin: 'idea'
apply plugin: 'spring-boot' 
apply plugin: 'war'
apply plugin: 'tomcat'
apply plugin: 'cargo'

buildscript {
    ext {
        tomcatVersion = '8.0.15'
        cargoVersion = '1.4.5'
        mailVersion = '1.5.2'
    }
    
    repositories {
        mavenCentral()
        jcenter()
    }
    
    dependencies {
        classpath 'org.gradle.api.plugins:gradle-tomcat-plugin:1.0'
        classpath 'org.gradle.api.plugins:gradle-cargo-plugin:1.4'
    }
}

war {
    baseName = 'forest'
    version = '0.0.1-SNAPSHOT'
}

/*
configurations {
    all*.exclude group: 'org.hibernate.javax.persistence', module: 'hibernate-jpa-2.0-api'
}
*/

repositories {
   flatDir {
       dirs 'libs'
   }
}

dependencies
{
    
	/*
    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}"
    tomcat "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}"
    tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}") {
        exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
    }
    */
    /*
    cargo "org.codehaus.cargo:cargo-core-uberjar:$cargoVersion",
            "org.codehaus.cargo:cargo-ant:$cargoVersion"
    */


    compile("org.springframework.boot:spring-boot-starter-parent:$rootProject.ext.springBootVersion")
    compile("org.springframework.boot:spring-boot-starter-web:$rootProject.ext.springBootVersion")
    {
        exclude module: 'org.springframework.boot:spring-boot-starter-logging'
    }
    compile("org.springframework.boot:spring-boot-starter-tomcat:$rootProject.ext.springBootVersion")
    compile("org.springframework.boot:spring-boot-starter-security:$rootProject.ext.springBootVersion")
    
    compile("org.springframework.boot:spring-boot-starter-actuator:$rootProject.ext.springBootVersion")
    compile("org.springframework.boot:spring-boot-starter-redis:$rootProject.ext.springBootVersion")
    
    compile("org.springframework.boot:spring-boot-starter-thymeleaf:$rootProject.ext.springBootVersion")
    
    compile("org.thymeleaf.extras:thymeleaf-extras-springsecurity3:2.1.1.RELEASE")
    
    
    compile("org.springframework.boot:spring-boot-starter-integration:$rootProject.ext.springBootVersion")
    
    //compile("org.springframework.integration:spring-integration-core:4.1.1.RELEASE")
    compile("org.springframework.integration:spring-integration-xmpp:4.1.1.RELEASE")

    compile("org.springframework.integration:spring-integration-mail:4.1.1.RELEASE")
    compile("javax.mail:javax.mail-api:$mailVersion");
    compile("com.sun.mail:mailapi:$mailVersion");
    compile("com.sun.mail:javax.mail:$mailVersion");
    //compile("com.sun.mail:smtp:$mailVersion");
    //compile("com.sun.mail:pop3:$mailVersion");
    //compile("com.sun.mail:imap:$mailVersion");
    
    /*
    compile "org.springframework.security:spring-security-core:${springSecurityVersion}"
    compile "org.springframework.security:spring-security-web:${springSecurityVersion}"
    compile "org.springframework.security:spring-security-config:${springSecurityVersion}"
    compile "org.springframework.security:spring-security-oauth2:${springSecurityOAuthVersion}"
    */
    //exclude module: 'cglib' //by artifact name
    //exclude group: 'org.jmock' //by group
    //exclude group: 'org.unwanted', module: 'iAmBuggy' //by both name and group
    
    compile "org.apache.lucene:lucene-core:$rootProject.ext.luceneVersion"
    compile "org.apache.lucene:lucene-analyzers-common:$rootProject.ext.luceneVersion"
    compile "org.apache.lucene:lucene-queryparser:$rootProject.ext.luceneVersion"
    
    compile name: 'arirang-analyzer-4.6-140808'
    
    compile 'org.apache.commons:commons-lang3:3.3.2'
    
	compile project(':forestCommon')
	compile project(':forestHibernate')

    compile 'com.fasterxml.jackson.core:jackson-databind:2.4.1'
    compile 'commons-fileupload:commons-fileupload:1.3.1'
    
    providedRuntime "org.springframework.boot:spring-boot-starter-tomcat:$rootProject.ext.springBootVersion"
    providedRuntime ("org.apache.tomcat.embed:tomcat-embed-jasper:$tomcatVersion") {
        exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
    }
    
    //testCompile('org.thymeleaf:thymeleaf-testing:2.1.4.RELEASE')
    
    testCompile "org.springframework.boot:spring-boot-starter-test:$rootProject.ext.springBootVersion"
}

tomcatRun {
    contextPath = ""
    URIEncoding = 'UTF-8'
    dependsOn war
}

tomcatRunWar {
    dependsOn war
}

cargoRedeployRemote {
    dependsOn war
}

cargoDeployRemote {
    dependsOn war
}

cargo {
    containerId = 'tomcat8x'
    port = 8080

    deployable {
        context = "${project.name}"
    }

    remote {
        hostname = '127.0.0.1'
        username = 'forest'
        password = 'forest'
    }
}

task gruntRun {
    String command = '. grunt serve'
    String directory = 'src/main/com'
    String ready = 'Waiting...'

    doLast {
        ProcessBuilder builder = new ProcessBuilder(command.split(' '))
        builder.redirectErrorStream(true)
        builder.directory(file(directory))
        Process process = builder.start()

        InputStream stdout = process.getInputStream()
        BufferedReader reader = new BufferedReader(new
                InputStreamReader(stdout))

        def line
        while ((line = reader.readLine()) != null) {
            println line
            if (line.contains(ready)) {
                println "$command is ready"
                break;
            }
        }
    }
}

/*
test {
    jvmArgs = ['-ea', '-Xmx256m']
    logging.captureStandardOutput(LogLevel.INFO)
    testReport = false
}
*/

task initProject(description: 'initialize project') << {
    createDir = {
        println "create source directory: $it"
        it.mkdirs()
    }
    sourceSets*.java.srcDirs*.each createDir
    sourceSets*.resources.srcDirs*.each createDir
    createDir webAppDir
    createDir new File(webAppDir, '/WEB-INF')
}

/*
task initProject << {
	createDir = {
		it.mkdirs();
	}
	
	sourceSets*.java.srcDirs*.each createDir
	sourceSets*.resources.srcDirs*.each createDir
	createDir webAppDir
	createDir new File(webAppDir, '/WEB-INF/views');

	processResources {
		from(sourceSets.main.resources.srcDirs) {
		}
	}
}
*/

eclipse {
/*
    classpath {
        file {
            withXml {
                
                Map<String, String> map = new HashMap<String, String>()
                map.put('exported', 'true')
                map.put('path', 'org.springsource.ide.eclipse.gradle.classpathcontainer')
                map.put('kind', 'con')
                
                def node = it.asNode()
                node.appendNode('classpathentry', map)
            }
        }
    }
*/
	classpath {
	    file {
            withXml {
                def node = it.asNode()
                node.appendNode('classpathentry', [kind: 'lib', path: 'libs/arirang-analyzer-4.6-140808.jar'])
            }
        }
	}

    project  {
        name = 'forestWebApp'
        comment = 'forest web project'
        natures = [
            'org.springframework.ide.eclipse.core.springnature',
            'org.springsource.ide.eclipse.gradle.core.nature',
            'org.eclipse.jdt.core.javanature',
            'org.eclipse.wst.common.project.facet.core.nature',
            'org.eclipse.wst.common.modulecore.ModuleCoreNature',
            'org.eclipse.jem.workbench.JavaEMFNature',
        ]
    }
    
    jdt {
	    sourceCompatibility = javaVersion
	    targetCompatibility = javaVersion
	    
		file {
			withProperties { 
				properties -> properties.setProperty("encoding//src/main/java", "utf-8")
					      properties.setProperty("encoding//src/main/resources", "utf-8")
					      properties.setProperty("encoding//src/test/java", "utf-8")
					      properties.setProperty("encoding//src/test/resources", "utf-8")
			}		
		}
    }
    
    wtp {
        component {
            contextPath = "/"
        }
        
        facet {
            facet name: "jst.web" , version: "3.1"
            facet name: "jst.java" , version: "1.8"
            facet name: 'wst.jsdt.web' , version: '1.0'   // Javascript
        }
    }    
}

/*
eclipse.classpath.file {
    // beforeMerged { classpath ->
    whenMerged { classpath ->
        classpath.entries.remove { entry -> entry.kind == 'con' }
        
        classpath.entries.findAll { entry -> entry.kind == 'con' }*.path = 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
        // org.eclipse.jst.j2ee.internal.web.container
        
        // classpath.entries.findAll { entry -> entry.kind == 'lib' }*.exported = false
        classpath.entries.removeAll { entry -> entry.kind == 'lib' }
    }
}
*/

tasks.eclipse.dependsOn cleanEclipse
